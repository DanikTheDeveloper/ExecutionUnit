library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity sra_entity is
    Generic ( N : natural := 64 );
    Port (
        A     : in  std_logic_vector(N-1 downto 0);
        B     : in  std_logic_vector(N-1 downto 0);
        Result: out std_logic_vector(N-1 downto 0)
    );
end entity sra_entity;

architecture behavioral of sra_entity is
    signal Atemp : std_logic_vector(N-1 downto 0);
    signal shift_amount : integer range 0 to N-1;
    signal zeros : std_logic_vector(N-1 downto 0);
    signal ones : std_logic_vector(N-1 downto 0);
begin
    zeros <= (others => '0');
    ones <= (others => '1');

    process(A, B)
    begin
        -- Initialize Atemp to A
        Atemp <= A;

        -- Check if the shift is arithmetic (based on the sign bit)
        if A(N-1) = '1' then
            -- Arithmetic shift: if the sign bit is 1, use ones
            Atemp <= ones(N-1 downto 0) & Atemp(N-1 downto 1);
        else
            -- Logical shift: append zeros
            Atemp <= zeros(N-1 downto 0) & Atemp(N-1 downto 1);
        end if;

        -- Output the shifted result
        Result <= Atemp;
    end process;
end architecture behavioral;
